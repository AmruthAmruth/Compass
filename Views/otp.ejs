<%- include('partials/header') %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
    :root {
        --primary-color: #4EA685;
        --secondary-color: #57B894;
        --black: #000000;
        --white: #ffffff;
        --gray: #efefef;
        --gray-2: #757575;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
    }

    body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: var(--gray);
    }

    .container {
        position: relative;
        background: var(--white);
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
        width: 450px;
        overflow: hidden;
        
    }

    /* Background Circles */
    .container::before, .container::after {
        content: "";
        position: absolute;
        width: 120px;
        height: 120px;
        background: var(--secondary-color);
        border-radius: 50%;
        opacity: 0.2;
    }

    .container::before {
        top: -40px;
        left: -40px;
    }

    .container::after {
        bottom: -40px;
        right: -40px;
    }

    h2 {
        margin-bottom: 20px;
        color: var(--black);
    }

    .otp-inputs {
        display: flex;
        justify-content: center;
        gap: 10px;
    }

    .otp-inputs input {
        width: 50px;
        height: 50px;
        text-align: center;
        font-size: 20px;
        border: 2px solid var(--primary-color);
        border-radius: 5px;
        outline: none;
        background-color: var(--gray);
    }

    .otp-inputs input:focus {
        border-color: var(--secondary-color);
    }

    #verify-btn, #resend-btn {
        margin-top: 20px;
        padding: 10px 15px;
        font-size: 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: 0.3s;
        width: 100%;
    }

    #verify-btn {
        background-color: var(--primary-color);
        color: var(--white);
    }

    #verify-btn:disabled {
        background-color: var(--gray-2);
        cursor: not-allowed;
    }

    #resend-btn {
        background-color: transparent;
        color: var(--primary-color);
        border: 1px solid var(--primary-color);
    }

    #resend-btn:disabled {
        color: var(--gray-2);
        border-color: var(--gray-2);
        cursor: not-allowed;
    }
</style>
</head>
<body>

<div class="container">
<h2>Enter OTP</h2>
<div class="otp-inputs">
    <input type="text" maxlength="1">
    <input type="text" maxlength="1">
    <input type="text" maxlength="1">
    <input type="text" maxlength="1">
</div>
<button id="verify-btn" disabled>Verify OTP</button>
<button id="resend-btn">Resend OTP</button>
</div>



<script>
    document.addEventListener("DOMContentLoaded", function () {
    const otpInputs = document.querySelectorAll(".otp-inputs input");
    const verifyBtn = document.getElementById("verify-btn");
    const resendBtn = document.getElementById("resend-btn");
    let timer = 59;
    let countdown;

    // Auto-focus & restrict input to numbers
    otpInputs.forEach((input, index) => {
        input.addEventListener("input", (e) => {
            input.value = input.value.replace(/\D/g, ""); // Allow only digits
            
            if (input.value && index < otpInputs.length - 1) {
                otpInputs[index + 1].focus();
            }

            updateVerifyButtonState();
        });

        input.addEventListener("keydown", (e) => {
            if (e.key === "Backspace" && !input.value && index > 0) {
                otpInputs[index - 1].focus();
                otpInputs[index - 1].value = ""; // Clear previous input
            }
        });
    });

    function updateVerifyButtonState() {
        verifyBtn.disabled = getOTP().length !== otpInputs.length;
    }


    function getOTP() {
        return Array.from(otpInputs).map(input => input.value).join("");
    }

  
    verifyBtn.addEventListener("click", async () => {
        const otp = getOTP();

        if (otp.length !== otpInputs.length) {
            Swal.fire({
                icon: "error",
                title: "Invalid OTP",
                text: "Please enter a valid 4-digit OTP",
            });
            return;
        }

        try {
            verifyBtn.disabled = true;
            verifyBtn.textContent = "Verifying...";

            const response = await fetch("/verifyotp", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ otp }),
            });

            const data = await response.json();
            if (data.success) {
                Swal.fire({
                    icon: "success",
                    title: "OTP Verified",
                    text: "Redirecting to Home...",
                    timer: 2000,
                    showConfirmButton: false,
                }).then(() => {
                    window.location.href = "/";
                });
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Verification Failed",
                    text: data.message,
                });
            }
        } catch (error) {
            console.error("Error verifying OTP:", error);
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "Something went wrong. Please try again later.",
            });
        } finally {
            verifyBtn.disabled = false;
            verifyBtn.textContent = "Verify OTP";
        }
    });

    
    function startCountdown() {
        timer = 59;
        resendBtn.setAttribute("disabled", true);
        resendBtn.textContent = `Resend OTP in ${timer}s`;

        if (countdown) clearInterval(countdown);

        countdown = setInterval(() => {
            timer--;
            resendBtn.textContent = `Resend OTP in ${timer}s`;

            if (timer === 0) {
                clearInterval(countdown);
                resendBtn.removeAttribute("disabled");
                resendBtn.textContent = "Resend OTP";
            }
        }, 1000);
    }

  
    startCountdown();

    resendBtn.addEventListener("click", async () => {
        try {
            resendBtn.setAttribute("disabled", true);
            resendBtn.textContent = "Sending...";

            const response = await fetch("/resendotp", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
            });

            const data = await response.json();
            if (data.success) {
                const otpExpirationTime = new Date(Date.now() + 60 * 1000);
                Swal.fire({
                    icon: "success",
                    title: "OTP Resent",
                    html: `A new OTP has been sent to your email.<br><b>Expires at:</b> ${otpExpirationTime.toLocaleTimeString()}`,
                });
                startCountdown();
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Resend Failed",
                    text: data.message,
                });
                resendBtn.removeAttribute("disabled");
                resendBtn.textContent = "Resend OTP";
            }
        } catch (error) {
            console.error("Error resending OTP:", error);
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "Something went wrong. Please try again.",
            });
            resendBtn.removeAttribute("disabled");
            resendBtn.textContent = "Resend OTP";
        }
    });

    updateVerifyButtonState();
});

</script>



</body>
</html>